Author's note: This document is a draft. All topics covered by the final
version are not listed, and the chapters on those that are, may not be
complete. Until I have a full overview of the types of information being
presented, the layout is also tentative.


Index
=====

XST Perl backend reference

0    Style
0.1    Indenting
0.2    Comments
0.3    Function calls

1    Framework
1.1    Initialization
1.2    Finalization

2    Reporting
2.1    Messages
2.2    Progress

3    XML handling
4    Configuration file I/O
5    Running system utilities
6    Controlling services and daemons

7    Large-scale configuration helpers
7.1    Getting network settings


XST Perl backend reference
==========================

This document is intended for anyone who is, or will be, working on the XST
backends using Perl as the programming language. It's meant to serve as both
a guide and a reference. Read it through once, and consult it often.

Most of this is required reading, since it sets down standards that must be
followed in order to have a consistent set of backends. When in doubt,
consult the project leader, Chema Celorio (chema@ximian.com), or Hans Petter
Jansson (hpj@ximian.com), who wrote this.


0  Style
   -----


0.1  Indenting
     ---------

For Perl backends, we use two-space indents (no tabs). In some places,
it's also possible to indent or space out code so it lines up in columns. Use
your best judgement in these cases.

Every Perl source file should have an Emacs formatting directive at the
beginning. The two first lines might look like this:

|  #/usr/bin/env perl
|  #-*- Mode: perl; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-


0.2  Comments
     --------

Comment your code liberally. Comments fall into two categories: Line comments
and block comments. Try to use more of the latter. Sometimes there's source
that has known problems; this should have a FIXME: comment describing the
problem attached to it. If you think something might cause non-fatal
problems, like slowness, point it out with a NOTE: comment. In general, if
you have an idea for improvements, but not the time to implement it, describe
it in a TODO: comment, so that someone else can do it if they come across it.

An instruction with a line comment:

|  push(@cf_statichosts, $enabled);  # Boolean; 1 = enabled.

A block comment:

|  # We list each config file type with as many alternate locations as
|  # possible. They are tried in array order. First found = used.


0.3  Function calls
     --------------

Whenever you call a function, be it in your own code or in a library, prefix
it with & and keep the parentheses around the arguments:

|  &function(arg, arg);

This eases debugging, since misspelled function calls are not reported
otherwise.


1  Framework
   ---------

The functions described in this chapter are vital in making a backend work
according to specifications.


1.1  Initialization
     --------------

The very first thing a backend should do, is call gst_init(). This is done as
follows:

|  &gst_init($name, $version, $description, @ARGV);

The three first arguments should be defined at the start of the source, under
a section called "Tool information".

$name:        The name of the tool, in all-lowercase letters. This string will
              form the file names of executables ($name-conf, $name-admin).

$version:     The version of this particular backend, major.minor.revision.

$description: A description of the backend's function, ranging from one line
              to one or two short paragraphs. Indented with 7 spaces.

gst_init() will parse arguments and exit with an informative error message if
the user invoked the backend incorrectly. It will also display a help page if
the user requested that, and exit.

If control is transferred back to your backend, you need to check the string
contained in $gst_operation. It will have one of three values:

get:    Get system configuration, printing it as XML to stdout.

set:    Set system configuration from XML provided on stdin.

filter: Read configuration from stdin, parse it, and print it back to stdout.
        This must be done using the same printing/parsing functions as get/set.

Making a top-level function for each method is recommended. The invocation
code might look like this:

|  &gst_init($name, $version, $description, @ARGV);
|
|  if    ($gst_operation eq "get")    { &get(); }
|  elsif ($gst_operation eq "set")    { &set(); }
|  elsif ($gst_operation eq "filter") { &filter(); }


1.2  Finalization
     ------------

When the backend is finished with the system configuration, you have to shut
it down properly. There's a function call that does this for you, and it
takes no arguments:

|  &gst_end();

This must be done after all interaction with the system configuration and
associated progress reporting has ceased (see chapter 2), but before any XML
is printed. This is important, since it will print report messages indicating
end-of-processing and beginning-of-XML.

Here's an example of a filter function (see chapter 1.1) that complies with
the above rules:

|  sub filter
|  {
|    &xml_parse();
|    &gst_end();
|    &xml_print();
|  }


2  Reporting
   ---------

By "reports", we refer to text emitted by the backend as it deals with the
system configuration. This text output is generated by a set of library
functions, and no other output is allowed at this stage (for this reason,
it's important to redirect output from helper utilities to /dev/null - see
chapter 5).

There are two types of reports: a) messages indicating steps being taken, or
warnings and errors resulting from them, and b) percentages indicating
roughly how much of the processing has been done.


2.1  Messages
     --------

Messages increase user confidence (research indicates that user stress levels
peak when waiting for a task to be carried out and they don't have
information about what's going on), aid in debugging and make it possible for
users to give programmers clues as to what's breaking, if something breaks.

|  &gst_report_info($id, $text);
|  &gst_report_warning($id, $text);
|  &gst_report_error($id, $text);
|  &gst_report_fatal($id, $text);

$id:   A number ranging from 0-99, uniquely specifying the message (for machine
       readability). Info, warning, error and fatal each has its own range of
       IDs.

$text: A human-readable string.

If the user invokes the backend with --verbose, each message will be written
in a human-readable fashion to stderr. If the user specifies --report, it
will be written in a machine-readable fashion (with message IDs included) to
stdout. If neither was specified, nothing will be output.


2.2  Progress
     --------

Frontends and users like to have approximate quantifications of how much of
the total processing is done, and how much remains. This is progress, ranging
from 0-99% (the last % represents the actual unloading of the tool). This
figure is usually displayed in a GtkProgress indicator.

|  &gst_progress($percentage);

$percentage: An integer quantity ranging from 0-99 inclusive.

The gst_progress() function will neutralize common mistakes, like progress
dropping to a lower value (going backwards) or progress exceeding 99%.

Older backends utilize a function called gst_print_progress(), coupled with a
global variable called $progress_max. This is deprecated behaviour and will
go away soon.


3  XML handling
   ------------


4  Configuration file I/O
   ----------------------


5  Running system utilities
   ------------------------




6  Controlling services and daemons
   --------------------------------


7  Large-scale configuration helpers
   ---------------------------------


7.1  Getting network settings
     ------------------------


